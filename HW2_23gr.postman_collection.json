{
	"info": {
		"_postman_id": "b2b817d2-999e-434e-8a25-0fd6ea9beb53",
		"name": "HW2_23gr",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "1.login+token",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let jsonData = pm.response.json();",
							"pm.environment.set('token', jsonData.token);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "login",
							"value": "solo",
							"type": "text"
						},
						{
							"key": "password",
							"value": "123",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}login",
					"host": [
						"{{url}}login"
					]
				}
			},
			"response": []
		},
		{
			"name": "2.user_info",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Тесты:",
							"//1) Статус код 200",
							"let jsonData = pm.response.json();",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"//2) Проверка структуры json в ответе.",
							"",
							"let schema = {",
							"  \"type\": \"object\",",
							"  \"properties\": {",
							"    \"person\": {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"u_age\": {",
							"          \"type\": \"integer\"",
							"        },",
							"        \"u_name\": {",
							"          \"type\": \"array\",",
							"          \"items\": [",
							"            {",
							"              \"type\": \"string\"",
							"            },",
							"            {",
							"              \"type\": \"integer\"",
							"            },",
							"            {",
							"              \"type\": \"integer\"",
							"            }",
							"          ]",
							"        },",
							"        \"u_salary_1_5_year\": {",
							"          \"type\": \"integer\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"u_age\",",
							"        \"u_name\",",
							"        \"u_salary_1_5_year\"",
							"      ]",
							"    },",
							"    \"qa_salary_after_12_months\": {",
							"      \"type\": \"number\"",
							"    },",
							"    \"qa_salary_after_6_months\": {",
							"      \"type\": \"integer\"",
							"    },",
							"    \"start_qa_salary\": {",
							"      \"type\": \"integer\"",
							"    }",
							"  },",
							"  \"required\": [",
							"    \"person\",",
							"    \"qa_salary_after_12_months\",",
							"    \"qa_salary_after_6_months\",",
							"    \"start_qa_salary\"",
							"  ]",
							"}",
							"    pm.test('Schema is valid', function () {",
							"        pm.expect(tv4.validate(jsonData, schema)).to.be.true; ",
							"    });",
							"//3) В ответе указаны коэффициенты умножения salary, напишите тесты по проверке правильности результата перемножения на коэффициент.",
							"pm.test(\"qa_salary_after_6_months\", function () {",
							"pm.expect(jsonData.qa_salary_after_6_months).to.eql(jsonData.start_qa_salary*2);",
							"});",
							"",
							"pm.test(\"qa_salary_after_12_months\", function () {",
							"    pm.expect(jsonData.qa_salary_after_12_months).to.eql(jsonData.start_qa_salary*2.9);",
							"});",
							"",
							"pm.test(\"u_salary_1_5_year\", function(){",
							"pm.expect(jsonData.person.u_salary_1_5_year).to.eql(jsonData.start_qa_salary*4);",
							"});",
							"",
							"//4) Достать значение из поля 'u_salary_1.5_year' и передать в поле salary запроса ",
							"pm.environment.set(\"u_salary_1.5_year\", jsonData.person.u_salary_1_5_year);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"Alex\",\n\"age\": 30,\n\"salary\": 1000,\n\"auth_token\": \"{{token}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}user_info",
					"host": [
						"{{url}}user_info"
					]
				}
			},
			"response": []
		},
		{
			"name": "3.new_data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1)",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"//2) В ответе указаны коэффициенты умножения salary, напишите тесты по проверке правильности результата перемножения на коэффициент.",
							"let jsonData = pm.response.json();",
							"pm.test(\"k_salary*2\", function () {",
							"pm.expect(+jsonData.salary[1]).to.eql(jsonData.salary[0]*2)    ",
							"});",
							"",
							"pm.test (\"k_salary*3\", function () {",
							"pm.expect(+jsonData.salary[2]).to.eql(jsonData.salary[0]*3)",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "30",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Alex",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}new_data",
					"host": [
						"{{url}}new_data"
					]
				}
			},
			"response": []
		},
		{
			"name": "4.test_pet_info",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"//) В ответе указаны коэффициенты умножения weight, напишите тесты по проверке правильности результата перемножения на коэффициент.",
							"//спарсили request",
							"let jsonData = pm.response.json();",
							"let df = jsonData.daily_food;",
							"let ds = jsonData.daily_sleep  ",
							"//спарсили запрос",
							"let weight = JSON.parse(request.data.weight)",
							"//console.log(\"weight = \",  weight, typeof(weight));  ",
							"//console.log(\"Daily_food = \", df, typeof(df));",
							"pm.test(\"k*daily_food\", function () {",
							"pm.expect(df).to.eql(weight*0.012);",
							"});",
							"pm.test(\"k*daily_sleep\", function () {",
							"pm.expect(ds).to.eql(weight*2.5);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "30",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Alex",
							"type": "text"
						},
						{
							"key": "weight",
							"value": "80",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}test_pet_info",
					"host": [
						"{{url}}test_pet_info"
					]
				}
			},
			"response": []
		},
		{
			"name": "5.get_test_user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Тесты:",
							"// 1) Статус код 200",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"// 2) Проверить что занчение поля name = значению переменной name из окружения",
							"let jsonData = pm.response.json() ;",
							"let resp_name = jsonData.name",
							"",
							" //console.log(\"env_name = \",  environment.name, typeof jsonData.name)",
							" //console.log(\"resp_name = \",  jsonData.name, typeof jsonData.name)",
							"pm.test(\"name_environment=name\", function() {",
							"pm.expect(environment.name).to.eql(resp_name)",
							"});",
							"",
							"// 3) Проверить что значение поля age в ответе соответсвует отправленному в запросе значению поля age",
							"//спарсили запрос",
							"// let req = request.data;",
							"// //console.log(\"req = \", req)",
							"// pm.test(\"age=name_request\", function() {",
							"// pm.expect(jsonData.age).to.eql(req.age)",
							"// });",
							"",
							"////Или так еще можно спасрсить запрос",
							"let req_age = JSON.parse(request.data.age)",
							"console.log(\"req_age = \", req_age)",
							"pm.test(\"age=name_request\", function() {",
							"pm.expect(+jsonData.age).to.eql(req_age)",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "30",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Alex",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}get_test_user",
					"host": [
						"{{url}}get_test_user"
					]
				}
			},
			"response": []
		}
	]
}